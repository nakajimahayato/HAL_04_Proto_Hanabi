/*==============================================================================

   攻撃花火の処理 [attackhanabi.cpp]
														 Author :
														 Date   :
--------------------------------------------------------------------------------

==============================================================================*/
#include "object.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************


//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************
bool HitHanabi(int isHit);
//*****************************************************************************
// グローバル変数
//*****************************************************************************
static GameObject g_Hanabi0bj;
static EnemyObject g_Enemy0bj;
static GameObject g_Objects[256];

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT InitAtHanabi(void)
{


	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void UninitAtHanabi(void)
{

}

//=============================================================================
// 更新処理
//=============================================================================
void UpdateAtHanabi(void)
{

}

//=============================================================================
// 描画処理
//=============================================================================
void DrawAtHanabi(void)
{

}


//=============================================================================
// 攻撃花火の移動処理
//=============================================================================
void MoveHanabi(void)
{
	//移動関数
	g_Hanabi0bj.pos.x, g_Hanabi0bj.pos.y;
	g_Hanabi0bj.vec;

}
void MoveHanabiAI(void)
{

}

//=============================================================================
// 攻撃花火の当たり判定処理
//=============================================================================
void HitHanabi(bool isHit)
{
	//if (g_Hanabi0bj.pos.x == g_Enemy0bj.pos.x || g_Hanabi0bj.pos.y == g_Enemy0bj.pos.y)
	//{
	//	isHit = true;
	//}
	
}