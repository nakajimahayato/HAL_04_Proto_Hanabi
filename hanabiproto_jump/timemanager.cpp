/*==============================================================================

   ゲーム内時間管理処理 [timemanager.cpp]
														 Author : 横田郁弥
														 Date   : 2022/12/10 14:35
--------------------------------------------------------------------------------
  ゲーム内時間を記録できる時間管理クラスを作成
  好きなように時間を動かせるようにする
  Updateにシーン遷移の条件

  時間管理.cppにクリア、ゲームオーバーの判定追加し、何らかの形でリザルトに渡す。
  リザルトにあるゲームクリアとゲームオーバーをどうやって切り替えるかを考える
  →(例)成功＆失敗フラグを時間管理クラスに作ってそのゲッターをリザルトに渡すとか
==============================================================================*/
#include "timemanager.h"
#include "score.h"

static TimeManager tm;
//=============================================================================
// 初期化処理
//=============================================================================
HRESULT InitTimeManager(void)
{
	tm.time = 0.0f;
	tm.frame = 0.0f;
	tm.nowTime = 0.0f;

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void UninitTimeManager(void)
{

}

//=============================================================================			
// 更新処理			
//=============================================================================	
void UpdateTimeManager()
{
	//シーン遷移の条件

	//制限時間がきたら
	if (tm.time >= TIME_LIMIT*60/*||ボスと敵沸きをすべて破壊時に。0*/)
	{
		//SetScene(SCENE_GRESULT);
		Result(GetEnemyScore(), GetPlayerScore());
	}

	if ((int)tm.frame %60)
	{
		tm.frame = 0.0f;
		tm.time++;
	}

	tm.frame++;
}

//=============================================================================
// 描画処理
//=============================================================================
void DrawTimeManager(void)
{

}

void Result(float enemyscore,float playerscore)
{
	//とりあえず引き分けは考えてない
		if (enemyscore >= playerscore)
		{
			return SetScene(SCENE_GRESULT);
		}
		else
		{
			return SetScene(SCENE_CRESULT);
		}
}